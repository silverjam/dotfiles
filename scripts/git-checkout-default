#!/usr/bin/env python

# Origin: https://www.peterbe.com/plog/gcm
#   (Slightly modified to add caching support)

import subprocess
import sys


GIT_CONFIG_KEY = "git-checkout-default.default-branch"


def run():
    default_branch = get_default_branch()
    current_branch = get_current_branch()
    if default_branch != current_branch:
        checkout_branch(default_branch)
    else:
        return 1
    return 0


def checkout_branch(branch_name):
    subprocess.run(["git", "checkout", branch_name])


def get_default_branch():
    res = subprocess.run(
        ["git", "config", "--worktree", "--get", GIT_CONFIG_KEY],
        check=False,
        capture_output=True,
    )
    if res.returncode == 0:
        return res.stdout.decode("utf-8").strip()
    origin_name = "origin"
    res = subprocess.run(
        ["git", "remote", "show", origin_name],
        check=True,
        capture_output=True,
    )
    for line in res.stdout.decode("utf-8").splitlines():
        if line.strip().startswith("HEAD branch:"):
            default_branch = line.replace("HEAD branch:", "").strip()
            subprocess.run(
                [
                    "git",
                    "config",
                    "--worktree",
                    GIT_CONFIG_KEY,
                    default_branch,
                ],
                check=True,
            )
            return default_branch
    raise ValueError(f"No remote called {origin_name!r}")


def get_current_branch():
    res = subprocess.run(["git", "branch", "--show-current"], capture_output=True)
    for line in res.stdout.decode("utf-8").splitlines():
        return line.strip()
    raise ValueError("Unexpected output from `git branch --show-current`")


if __name__ == "__main__":
    sys.exit(run())
